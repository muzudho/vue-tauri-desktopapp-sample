<template>
</template>

<script setup lang="ts">

    // ##############
    // # インポート #
    // ##############

    import { computed } from 'vue';
    // 👆 ［初級者向けのソースコード］では、 reactive は使いません。

    // ++++++++++++++++++
    // + コンポーザブル +
    // ++++++++++++++++++

    // import type { PrintingInput, PrintingMotion } from '../composables/player-controller';

    // ++++++++++++++++++++++++++++++++++++
    // + インポート　＞　インターフェース +
    // ++++++++++++++++++++++++++++++++++++

    import type Rectangle from '../interfaces/Rectangle';


    // ####################################
    // # このコンポーネントが受け取る引数 #
    // ####################################
    
    interface Props {

        // ++++++++++++++++++++++++++
        // + オブジェクト　＞　盤１ +
        // ++++++++++++++++++++++++++

        // tileBoard1TileWidth: number,
        // tileBoard1TileHeight: number,
        // board1FileNum: number,  // 筋の数。ただし、右側と下側に１マス余分に付いているマスクは含まない。
        // board1FloorTilemapTileNum: number,  // 床のタイルマップの、左上隅から数えたタイル数

        // ++++++++++++++++++++++++++++
        // + オブジェクト　＞　印字１ +
        // ++++++++++++++++++++++++++++

        // printing1FileMax: number,
        // printing1RankMax: number,
        // printing1FileNum: number,
        // printing1RankNum: number,
        // printing1Left: number,
        // printing1Top: number,
        // printing1Input: PrintingInput,
        // printing1Motion: PrintingMotion,
        // printing1MotionSpeed: number,
        // printing1MotionWait: number,
        // printing1MotionWalkingFrames: number,
        sourceTilemapRectangles: Rectangle[],
        // printing1OutOfSightIsLock: boolean,
        // printing1IsLooping: boolean,
        imageBoard1Data: number[],

    }
    // デフォルト値を設定
    const props = defineProps<Props>();
    // 双方向に変更通知が飛ぶよう v-model 化：
    defineEmits<{

        // ++++++++++++++++++++++++++
        // + オブジェクト　＞　盤１ +
        // ++++++++++++++++++++++++++

        // 'update:board1FileNum': [value: number];

        // ++++++++++++++++++++++++++++
        // + オブジェクト　＞　印字１ +
        // ++++++++++++++++++++++++++++

        // 'update:printing1FileNum': [value: number];
        // 'update:printing1RankNum': [value: number];
        // 'update:printing1Left': [value: number];
        // 'update:printing1Top': [value: number];
        // 'update:printing1Input': [value: PrintingInput];
        // 'update:printing1Motion': [value: PrintingMotion];
        // 'update:printing1MotionSpeed': [value: number];
        // 'update:printing1MotionWait': [value: number];
        // 'update:printing1MotionWalkingFrames': [value: number];
        'update:sourceTilemapRectangles': [value: Rectangle[]];
        // 'update:printing1OutOfSightIsLock': [value: boolean];
        // 'update:printing1IsLooping': [value: boolean];
        'update:imageBoard1Data': [value: number[]];
    }>();

    // ################
    // # オブジェクト #
    // ################

    // ++++++++++++++++++++++++++
    // + オブジェクト　＞　印字 +
    // ++++++++++++++++++++++++**
    //
    // 盤上に表示される数字柄、絵柄など。
    //

    /**
     * マスの印字。ソース・タイルマップのタイルのインデックス x の文字列。
     * @returns 該当なしのとき "-"
     */
    const getSourceTileSqStringByImageBoardSq = computed<
        (printingIndex: number) => string
    >(() => {
        return (printingIndex: number) => {

            if (printingIndex == -1) {
                return "-"; // 印字のサイズの範囲外になるところには、"-" でも表示しておく
            }

            const sourceTileIndex = props.imageBoard1Data[printingIndex];
            return `${sourceTileIndex}`;
        };
    });


    /**
     * 印字表のインデックスを渡すことで、そこに印字するタイルの、ソースタイルの left を返す。
     */
    const getSourceTileLeftByImageSq = computed<
        (printingIndex:number) => number
    >(() => {
        return (printingIndex: number) => {

            if (printingIndex == -1) {
                return 0;   // 印字のサイズの範囲外になるところには、とりあえず 0 を返す。左上のタイルが選ばれる。
            }

            const sourceTileIndex = props.imageBoard1Data[printingIndex];

            try {
                return props.sourceTilemapRectangles[sourceTileIndex]["left"];
            } catch(error) {
                console.error(`ERROR: ${error} | printingIndex=${printingIndex}`);
                return 0;
            }
        };
    });


    // ################
    // # エクスポーズ #
    // ################

    defineExpose({
        getSourceTileSqStringByImageBoardSq,
        getSourceTileLeftByImageSq,
    });

</script>

<style scoped>
</style>
